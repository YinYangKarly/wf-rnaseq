process {
    // Minimap2 align
    
    withName: MINIMAP2_ALIGN {
        queue = 'all'
        //{ reads.toList().size() > 1 ?
          //          (1*((reads.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 300000) < 3600000 ? 'short' : 'all') :
            //        (1*(reads.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory =  30.GB

        time = 24.h 
        //{ reads.toList().size() > 1 ?
          //          24.h * ((reads.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 300000) :
            //        24.h * (reads.target.size() * task.attempt / 1000 + 125000)}
        cpus = 8

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 1

        publishDir = [path:{"${params.outdir}/minimap2_results/${meta.id}"},mode: 'copy']

        ext.args = "-ax splice --splice "
    }

    withName: BAM2GFF {
        queue = 'short'

        memory = { bam.toList().size() > 1 ?
                    8.B * ((bam.target.stream().reduce(0, (x, y) -> x + y.size()) + index.target.size()) * task.attempt + (1024*1024*1024)): 
                    8.B * ((bam.target.size() + index.target.size()) * task.attempt + (1024*1024*1024))}

        time = { bam.toList().size() > 1 ?
                    1.ms * ((bam.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    1.ms * (bam.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 2

        publishDir = [path:{"${params.outdir}/bam2gff_results/${meta.id}"},mode: 'copy']
    }

    withName: GFFREAD_RNABLOOM2 {
        queue = 'short'

        memory = {gff.toList().size() > 1 ?
                8.B * ((gff.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt + (1024*1024*1024)):
                8.B * ((gff.target.size()) * task.attempt + (1024*1024*1024))}

        time = { gff.toList().size() > 1 ?
                    8.ms * ((gff.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    8.ms * (gff.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 2

        publishDir = [path:{"${params.outdir}/gffread_results/${meta.id}"},mode: 'copy']

        ext.args = "-T"
    }

      withName: GFFCOMPARE_RNABLOOM2 {

        publishDir = [path:{"${params.outdir}/gffcompare_results_rnabloom2/${meta.id}_rnabloom2"}, mode: 'copy']
        
        queue = { gtfs.toList().size() > 1 ?
                    (5*((gtfs.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
                    (5*(gtfs.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {gtfs.toList().size() > 1 ?
                8.B * ((gtfs.target.stream().reduce(0, (x, y) -> x + y.size()) + fasta.target.size() + reference_gtf.target.size()) * task.attempt + (1024*1024*1024)):
                8.B * ((gtfs.target.size() + fasta.target.size() + reference_gtf.target.size()) * task.attempt + (1024*1024*1024))}

        time = { gtfs.toList().size() > 1 ?
                    5.ms * ((gtfs.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    5.ms * (gfts.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3

        ext.args = '-C'


    }
    
     withName: GFFCOMPARE_RNABLOOM2_2 {

        publishDir = [path:{"${params.outdir}/gffcompare_results_rnabloom2_final/${meta.id}_rnabloom2"}, mode: 'copy']
        
        queue = { gtfs.toList().size() > 1 ?
                    (5*((gtfs.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
                    (5*(gtfs.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {gtfs.toList().size() > 1 ?
                8.B * ((gtfs.target.stream().reduce(0, (x, y) -> x + y.size()) + fasta.target.size() + reference_gtf.target.size()) * task.attempt + (1024*1024*1024)):
                8.B * ((gtfs.target.size() + fasta.target.size() + reference_gtf.target.size()) * task.attempt + (1024*1024*1024))}

        time = { gtfs.toList().size() > 1 ?
                    5.ms * ((gtfs.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    5.ms * (gfts.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3

        ext.args = '-C'


    }

    withName: REMOVE_PART_HEADER {
        queue = "all"
        
        memory = 10.GB
        time = 2.h
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }
}
