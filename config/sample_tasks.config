process {

    //star genome generate
    withName: STAR_GENOMEGENERATE {

        queue = {(fasta.target.size() * task.attempt / 1000 + 60000)*1.2 < 3600000 ? 'short' : 'all'}
        memory = { 25.B * fasta.target.size() * task.attempt}
        time = { 1.ms * (fasta.target.size() * task.attempt / 1000 + 60000)*1.2}
        cpus = 10

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }



    //star align
    withName: STAR_ALIGN {

        //Checks if 5 milliseconds time size is below 1 hour. If so, it will be placed in short queue, else in all queue
        queue = { reads.toList().size() > 1 ?
                    (1*((reads.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
                    (1*(reads.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {reads.toList().size() > 1 ?
                    30.B * ((reads.target.stream().reduce(0, (x, y) -> x + y.size()) + index.target.size()) * task.attempt  + (1024*1024*1024)): 
                    30.B * ((reads.target.size() + index.target.size()) * task.attempt + (1024*1024*1024))} 

        time = { reads.toList().size() > 1 ?
                    1.ms * ((reads.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    1.ms * (reads.target.size() * task.attempt / 1000 + 125000)}
                    
        cpus = 8

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3


        ext.args = '--readFilesCommand zcat --outSAMtype BAM SortedByCoordinate --outWigType bedGraph --outWigStrand Unstranded --outSAMunmapped Within KeepPairs'
    }



    //hisat2 align
    withName: HISAT2_ALIGN {

        memory = {reads.toList().size() > 1 ?
                    8.B * ((reads.target.stream().reduce(0, (x, y) -> x + y.size()) + index.target.size()) * task.attempt + (1024*1024*1024)): 
                    8.B * ((reads.target.size() + index.target.size()) * task.attempt + (1024*1024*1024))}

        time = { reads.toList().size() > 1 ?
                    8.ms * ((reads.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    8.ms * (reads.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3

        ext.args = '--rg "PL:illumina"'

        ext.prefix = { "${meta.id}_Hisat2" }


    }

    //Samtools Sort
    withName {

        queue = { reads.toList().size() > 1 ?
                    (5*((reads.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
                    (5*(reads.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {reads.toList().size() > 1 ?
                    25.B * ((reads.target.stream().reduce(0, (x, y) -> x + y.size()) + index.target.size()) * task.attempt + (1024*1024*1024)): 
                    25.B * ((reads.target.size() + index.target.size()) * task.attempt + (1024*1024*1024))}

        time = { reads.toList().size() > 1 ?
                    5.ms * ((reads.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    5.ms * (reads.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }



    //picard markduplicates
    withName: PICARD_MARKDUPLICATES {

        publishDir = [path:{"${params.outdir}/bamfiles_per_sample/${meta.id}"}, mode: 'copy']

        queue = { bam.toList().size() > 1 ?
                    (5*((bam.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
                    (5*(bam.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = { 1.GB * ((fasta.target.size() / 1024 / 1024 / 1024) + 10) }

        time = { bam.toList().size() > 1 ?
                    5.ms * ((bam.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    5.ms * (bam.target.size() * task.attempt / 1000 + 125000)}
        cpus = 8

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3

        ext.args = '--CREATE_INDEX true'
    }



    //umitool dedup
    withName: UMITOOLS_DEDUP {

        queue = { bam.toList().size() > 1 ?
                    (5*((bam.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
                    (5*(bam.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {bam.toList().size() > 1 ?
                25.B * ((bam.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt + (1024*1024*1024)):
                25.B * ((bam.target.size()) * task.attempt + (1024*1024*1024))}

        time = { bam.toList().size() > 1 ?
                    5.ms * ((bam.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    5.ms * (bam.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3

        ext.args = '--umi-separator=":"'
        ext.prefix = { "${meta.id}.dedup" }
    }
}