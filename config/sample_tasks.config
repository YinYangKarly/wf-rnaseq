process {

    //star genome generate
    withName: STAR_GENOMEGENERATE {
        memory = { 8.B * fasta.target.size() * task.attempt * 3}
        time = { 8.ms * fasta.target.size() * task.attempt / 1000 }
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }



    //star align
    withName: STAR_ALIGN {
        memory = {reads.toList().size() > 1 ?
                    8.B * ((reads.target.stream().reduce(0, (x, y) -> x + y.size()) + index.target.size()) * task.attempt + (1024*1024*1024)): 
                    8.B * ((reads.target.size() + index.target.size()) * task.attempt + (1024*1024*1024))} 

        time = { reads.toList().size() > 1 ?
                    8.ms * ((reads.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    8.ms * (reads.target.size() * task.attempt / 1000 + 125000)}
                    
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3


        ext.args = '--readFilesCommand zcat --outSAMtype BAM SortedByCoordinate --outWigType bedGraph --outWigStrand Unstranded'
    }



    //hisat2 align
    withName: HISAT2_ALIGN {
        memory = {reads.toList().size() > 1 ?
                    8.B * ((reads.target.stream().reduce(0, (x, y) -> x + y.size()) + index.target.size()) * task.attempt + (1024*1024*1024)): 
                    8.B * ((reads.target.size() + index.target.size()) * task.attempt + (1024*1024*1024))}

        time = { reads.toList().size() > 1 ?
                    8.ms * ((reads.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    8.ms * (reads.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3

        ext.args = '--rg "PL:illumina"'

        ext.prefix = { "${meta.id}_Hisat2" }


    }

    //Samtools Sort
    withName {
        memory = {reads.toList().size() > 1 ?
                    8.B * ((reads.target.stream().reduce(0, (x, y) -> x + y.size()) + index.target.size()) * task.attempt + (1024*1024*1024)): 
                    8.B * ((reads.target.size() + index.target.size()) * task.attempt + (1024*1024*1024))}

        time = { reads.toList().size() > 1 ?
                    8.ms * ((reads.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    8.ms * (reads.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }



    //picard markduplicates
    withName: PICARD_MARKDUPLICATES {
        memory = {bam.toList().size() > 1 ?
                8.B * ((bam.target.stream().reduce(0, (x, y) -> x + y.size()) + fasta.target.size()) * task.attempt + (1024*1024*1024)) :
                8.B * ((bam.target.size() + fasta.target.size()) * task.attempt + (1024*1024*1024))}

        time = { bam.toList().size() > 1 ?
                    8.ms * ((bam.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    8.ms * (bam.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3

        ext.args = '--CREATE_INDEX true'
    }



    //umitool dedup
    withName: UMITOOLS_DEDUP {
        memory = {bam.toList().size() > 1 ?
                8.B * ((bam.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt + (1024*1024*1024)):
                8.B * ((bam.target.size()) * task.attempt + (1024*1024*1024))}

        time = { bam.toList().size() > 1 ?
                    8.ms * ((bam.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    8.ms * (bam.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3

        ext.prefix = { "${meta.id}.dedup" }
    }
}