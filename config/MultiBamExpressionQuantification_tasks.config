process {
    //Stringtie
    withName: STRINGTIE_STRINGTIE {
        memory = {bam.toList().size() > 1 ?
                8.B * ((bam.target.stream().reduce(0, (x, y) -> x + y.size()) + annotation_gft.target.size()) * task.attempt + (1024*1024*1024)):
                8.B * ((bam.target.size() + annotation_gft.target.size()) * task.attempt + (1024*1024*1024))}

        time = { bam.toList().size() > 1 ?
                    8.ms * ((bam.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    8.ms * (bam.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3

        ext.prefix = { "${meta.id}_stringtie" }
    }



    //gffcompare
    withName: GFFCOMPARE {
        memory = {gtfs.toList().size() > 1 ?
                8.B * ((gtfs.target.stream().reduce(0, (x, y) -> x + y.size()) + fasta.target.size() + reference_gtf.target.size()) * task.attempt + (1024*1024*1024)):
                8.B * ((gtfs.target.size() + fasta.target.size() + reference_gtf.target.size()) * task.attempt + (1024*1024*1024))}

        time = { gtfs.toList().size() > 1 ?
                    8.ms * ((gtfs.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    8.ms * (gfts.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3

    }
    


        withName: HTSEQ_COUNT {
        memory = {input.toList().size() > 1 ?
                8.B * ((input.target.stream().reduce(0, (x, y) -> x + y.size()) + gtf.target.size()) * task.attempt + (1024*1024*1024)):
                8.B * ((input.target.size() + gtf.target.size()) * task.attempt + (1024*1024*1024))}

        time = { input.toList().size() > 1 ?
                    8.ms * ((input.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    8.ms * (input.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3

        ext.args = '-s no'
    }



    //Collect collumn
    withName: COLLECT_COLUMN {
        memory = {abundance.toList().size() > 1 ?
                8.B * ((abundance.target.stream().reduce(0, (x, y) -> x + y.size()) + referenceGtf.target.size()) * task.attempt + (1024*1024*1024)):
                8.B * ((abundance.target.size() + referenceGtf.target.size()) * task.attempt + (1024*1024*1024))}

        time = { abundance.toList().size() > 1 ?
                    8.ms * ((abundance.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    8.ms * (abundance.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3

        ext.args = '-H params.header -S params.sumOnDuplicateId'
        ext.prefix = { "${meta.id}_collect" }


    }

}