process {
    //PREPROCESSING
    //NcigarReads
    withName: GATK4_SPLITNCIGARREADS {
        queue = { bam.toList().size() > 1 ?
                    (5*((bam.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
                    (5*(bam.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {bam.toList().size() > 1 ?
                8.B * ((bam.target.stream().reduce(0, (x, y) -> x + y.size()) + fasta.target.size()) * task.attempt + (1024*1024*1024)):
                8.B * ((bam.target.size() + fasta.target.size()) * task.attempt + (1024*1024*1024))}

        time = { bam.toList().size() > 1 ?
                    5.ms * ((bam.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    5.ms * (bam.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3

        ext.prefix = { "${meta.id}_Cigar" }
    }



     //Samtools index
    withName: SAMTOOLS_INDEX {
        memory = {input.toList().size() > 1 ?
                8.B * ((input.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt + (1024*1024*1024)):
                8.B * ((input.target.size()) * task.attempt + (1024*1024*1024))}

        time = { input.toList().size() > 1 ?
                    8.ms * ((input.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    8.ms * (input.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3

    }



    //Base recalibrator
    withName: GATK4_BASERECALIBRATOR {
        memory = {input.toList().size() > 1 ?
                8.B * ((input.target.stream().reduce(0, (x, y) -> x + y.size()) + fasta.target.size()) * task.attempt + (1024*1024*1024)):
                8.B * ((input.target.size() + fasta.target.size()) * task.attempt + (1024*1024*1024))}

        time = { input.toList().size() > 1 ?
                    8.ms * ((input.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    8.ms * (input.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3

    }
    

    
    //Apply Bqsr
    withName: GATK4_APPLYBQSR {
        memory = {input.toList().size() > 1 ?
                8.B * ((input.target.stream().reduce(0, (x, y) -> x + y.size()) + fasta.target.size()) * task.attempt + (1024*1024*1024)):
                8.B * ((input.target.size() + fasta.target.size()) * task.attempt + (1024*1024*1024))}

        time = { input.toList().size() > 1 ?
                    8.ms * ((input.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    8.ms * (input.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3

        ext.prefix = { "${meta.id}_ApplyBqsr" }

    }
}